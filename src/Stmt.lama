-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  var state = fst;
  var world = snd;
  case stmt of
    Assn (v, e) -> [c.state <- [v, evalExpr(c.state,e)], c.world]       |
    Seq  (a, b) -> eval(eval(c, a), b)                                  |
    Skip        -> c                                                    |
    Read (v   ) -> fun([x,w]){[c.state <-[v,x], w]}(readWorld(c.world)) |
    Write(e   ) -> [c.state, writeWorld(evalExpr(c.state, e),c.world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
