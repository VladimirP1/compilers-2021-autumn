-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun evalOne (c, insn) {
  var stack = fun([x,_,_]){x};
  var state = fun([_,x,_]){x};
  var world = fun([_,_,x]){x};
  case insn of
    READ      -> fun([v,w]){[v:c.stack, c.state, w]}(readWorld(c.world)) |
    WRITE     -> [c.stack.tl,c.state,writeWorld(c.stack.hd, c.world)]    |
    BINOP (s) -> [fun(r:l:t){binop(s,l,r):t}(c.stack),c.state,c.world]   |
    LD    (s) -> [(c.state)(s):c.stack,c.state,c.world]                  |
    ST    (s) -> [c.stack.tl,c.state<-[s,c.stack.hd],c.world]            |
    CONST (n) -> [n:c.stack,c.state,c.world]                             |
    _ -> c
  esac
}

fun eval (c, insns) {
  foldl(evalOne, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (s)        ->  {LD(s)}    |
    Const   (n)      ->  {CONST(n)} |
    Binop (op, l, r) ->  compileExpr(l) +++ compileExpr(r) +++ {BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (v, e) -> compileExpr(e) +++ {ST(v)}    |
    Seq   (a, b) -> compileSM(a) +++ compileSM(b) |
    Skip         -> {}                            |
    Read  (v   ) -> {READ, ST(v)}                 |
    Write (e   ) -> compileExpr(e) +++ {WRITE}
  esac
}
