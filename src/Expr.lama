-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (defs, expr)         |
--        Fun     (args, body)         |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun makeDefs(s, defs) {
  foldl(fun(s, def){
    case def of
      Var(vs) -> s.addNames(vs) |
      Fun(name, args, body) -> s.addFunction(name, args, body)
    esac
  }, s, defs)
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  -- printf("%s\n", expr.string);
  case expr of
      Const (z) -> [c, z]
    | Var (x) -> [c, s.lookup(x)]
    | Ref (x) -> [c, Ref(x)]
    | Binop (op, x, y) -> case evalList(c, {x, y}) of
                            [cc, {xx, yy}] -> [cc, evalOp(op, xx, yy)]
                          esac
    | Skip -> [c, Bot]
    | Assn(to, what) -> case evalList(c, {to, what}) of
                          [cc @ [ss, ww], {Ref(xx), yy}] -> [[ss <- [xx, yy], ww], yy]
                        esac
    | Read(x) ->  case readWorld(w) of
                    [v, ww] -> [[s <- [x, v], ww], Bot]
                  esac
    | Write(x) -> case eval(c, x) of
                    [cc@[ss, ww], vv] -> case writeWorld(vv, ww) of
                                            www -> [[ss, www], Bot]
                                          esac
                  esac
    | Seq(x,y) -> case evalList(c, {x,y}) of
                    [cc, {xx, yy}] -> [cc, yy]
                  esac
    | If (cond, s1, s2) ->  case eval(c, cond) of
                                [cc, 0] -> eval(cc, s2)
                              | [cc, _] -> eval(cc, s1)   
                            esac        
    | While (cond, s1) ->   case eval(c, cond) of
                                [cc, 0] -> [cc, Bot]
                              | [cc, _] -> eval(eval(cc, s1).fst, expr)
                            esac
    | DoWhile(s1, cond) -> case eval(c, s1) of
                              [cc, _] ->  case eval(cc, cond) of
                                              [ccc, 0] -> [ccc, Bot]
                                            | [ccc, _] -> [eval(ccc, expr).fst, Bot]
                                          esac
                            esac
    | Scope   (defs, expr) -> case s.enterScope of
                                ss ->  case ss.makeDefs(defs) of
                                        ss2 ->  case eval([ss2, w], expr) of
                                                [cc@[ss3, ww], vv] -> [[ss3.leaveScope, ww], vv]
                                              esac
                                      esac
                              esac
    | Call    (name, args) -> case s.lookup(name) of
                                Fun(fargs, fbody)  -> case evalList(c, args) of
                                                        [cc@[ss, ww], vals] ->  case addNames(ss.enterFunction, fargs) of
                                                                                  ss2 ->  case eval([foldl(fun(s, [n, v]){ s <- [n,v] }, ss2, zip(fargs, vals)), ww], fbody) of
                                                                                            [cc3@[ss3, ww3], vv3] -> [[leaveFunction(ss, ss3.getGlobal), ww3], vv3]
                                                                                          esac
                                                                                esac
                                                      esac
                              esac
    | Ignore(e) -> [eval(c, e).fst, Bot]
    | _ -> failure ("This statement is not yet implemented\n")
    esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}