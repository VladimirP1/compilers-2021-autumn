-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun patternMatches(scrutinee, pattern) {
  fun matchArray(scrutinee, pattern) {
    case pattern of 
        p:ps -> 
          case scrutinee of
              s:ss -> patternMatches(s, p) && matchArray(ss, ps)
            | _ -> false
          esac
      | {} -> 
          case scrutinee of
              {} -> true
            | _ -> false
          esac
    esac
  }

  fun matchSingle (scrutinee, pattern) {
    -- printf("%s / %s\n", string(scrutinee), string(pattern));
    case pattern of
        Array(a) 
            ->  case scrutinee of 
                    #array -> matchArray(arrayList(scrutinee), a)
                  | _ -> false
                esac
      | Sexp(pname, a) 
            ->  case scrutinee of
                    Sexp(sname, scrutinee) -> compare(pname, sname) == 0 && matchArray(arrayList(scrutinee), a)
                  | _ -> false
                esac
      | Wildcard ->  true
      | Const(x) -> compare(scrutinee, x) == 0
      | String(s) -> compare(scrutinee, s) == 0
    esac
  }

  case pattern of 
      Named(_, x) -> patternMatches(scrutinee, x)
    | _ -> matchSingle(scrutinee, pattern)
  esac
}

fun makeDefs(s, defs) {
  foldl(fun(s, def){
    case def of
      Var(vs) -> s.addNames(vs) |
      Val(vs) -> s.addNames(vs) |
      Fun(name, args, body) -> s.addFunction(name, args, body)
    esac
  }, s, defs)
}

fun eval (c@[s, w], expr) {
  --  printf("%s\n", expr.string);
  case expr of
      Const (z) -> [c, z]
    | Var (x) -> [c, s.lookup(x)]
    | Ref (x) -> [c, Ref(x)]
    | Binop (op, x, y) -> case evalList(c, {x, y}) of
                            [cc, {xx, yy}] -> [cc, evalOp(op, xx, yy)]
                          esac
    | Skip -> [c, Bot]
    | Assn(to, what) -> case evalList(c, {to, what}) of
                            [cc @ [ss, ww], {Ref(xx), yy}] -> [[ss <- [xx, yy], ww], yy]
                          | [cc @ [ss, ww], {ElemRef(xx, ii), yy}] -> [cc, xx[ii] := yy]
                        esac
    | Read(x) ->  case readWorld(w) of
                    [v, ww] -> [[s <- [x, v], ww], Bot]
                  esac
    | Write(x) -> case eval(c, x) of
                    [cc@[ss, ww], vv] -> case writeWorld(vv, ww) of
                                            www -> [[ss, www], Bot]
                                          esac
                  esac
    | Seq(x,y) -> case evalList(c, {x,y}) of
                    [cc, {xx, yy}] -> [cc, yy]
                  esac
    | If (cond, s1, s2) ->  case eval(c, cond) of
                                [cc, 0] -> eval(cc, s2)
                              | [cc, _] -> eval(cc, s1)   
                            esac        
    | While (cond, s1) ->   case eval(c, cond) of
                                [cc, 0] -> [cc, Bot]
                              | [cc, _] -> eval(eval(cc, s1).fst, expr)
                            esac
    | DoWhile(s1, cond) -> case eval(c, s1) of
                              [cc, _] ->  case eval(cc, cond) of
                                              [ccc, 0] -> [ccc, Bot]
                                            | [ccc, _] -> [eval(ccc, expr).fst, Bot]
                                          esac
                            esac
    | Scope   (defs, expr) -> case s.enterScope of
                                ss ->  case ss.makeDefs(defs) of
                                        ss2 ->  case eval([ss2, w], expr) of
                                                [cc@[ss3, ww], vv] -> [[ss3.leaveScope, ww], vv]
                                              esac
                                      esac
                              esac
    | Call    (name, args) -> 
        case s.lookup(name) of
            Fun(fargs, fbody)  -> 
                case evalList(c, args) of
                  [cc@[ss, ww], vals] ->  
                        case fbody of 
                            External -> fun ([ret, ww2]) { [[ss, ww2], ret] } (evalBuiltin(name, vals, ww))
                          | _ ->
                              case addNames(enterFunction(ss), fargs) of
                                ss2 ->  case eval([foldl(fun(s, [n, v]){ s <- [n,v] }, ss2, zip(fargs, vals)), ww], fbody) of
                                          [cc3@[ss3, ww3], vv3] -> [[leaveFunction(ss, ss3.getGlobal), ww3], vv3]
                                        esac
                              esac
                        esac
                esac
        esac
    | Ignore(e) -> [fst(eval(c, e)), Bot]
    | String  (s) -> [c, s]
    | Array   (es) -> fun ([c, r]) { [c, listArray(r)] } (evalList(c, es))
    | Elem    (a, i) -> 
        fun ([c, a:i:{}]) {
            case a of
                Sexp (_, a) -> [c, a[i]]
              | _ -> [c, a[i]]
            esac
        } (evalList(c, {a, i}))
    | ElemRef (a, i) ->
        fun ([c, a:i:{}]) {
            case a of
                Sexp (_, a) -> [c, ElemRef(a, i)]
              | _ -> [c, ElemRef(a, i)]
            esac
        } (evalList(c, {a, i}))
    | Set (s, e) -> eval (c, Assn (Ref (s), e))
    | Sexp (name, es) -> fun ([c, r]) { [c, Sexp(name, listArray(r))] } (evalList(c, es))
    | Case (name, branches) -> 
        var match = fun (scrutinee) {
            foldl(fun(cur, [pattern, expr]) {
              case cur of
                  {} -> if patternMatches(scrutinee, pattern) then expr else cur fi
                | _ -> cur
              esac
            }, {}, branches)
        } (lookup(s, name));
        case match of
            {} -> failure ("match failure")
          | _ -> eval(c, match)
        esac
   -- | _ -> failure ("This statement is not yet implemented\n")
    esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
